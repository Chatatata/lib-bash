#!/usr/bin/env bash

export LibBash__LibFolder=${1:-"lib-bash"}
export LibBash__InstallationFolder="bin/${LibBash__LibFolder}"
export LibBash__GitDestinationFolder="../${LibBash__LibFolder}"
export LibBash__GitUrl="git@github.com:pioneerworks/lib-bash.git"
export LibBash__RebaseEvery=3600 # seconds
export LibBash__LastRebaseAt=${LibBash__LastRebaseAt:-1} # seconds

lib::bash::source() {
  local folder=${1}
  declare -a files=($(ls -1 ${folder}/*.sh))
  for bash_file in ${files[@]}; do source ${bash_file}; done
}

epoch() {
  date +%s
}

lib::bash::lib-install() {
  local __home=$(pwd)
  [[ -d "${LibBash__GitDestinationFolder}" ]] || git clone ${LibBash__GitUrl} ${LibBash__GitDestinationFolder} 2>&1 | cat > /dev/null
  [[ -z ${CI} && -d "${LibBash__GitDestinationFolder}" ]] && {
    cd ${LibBash__GitDestinationFolder}
    if [[ ${LibBash__LastRebaseAt} -gt 0 ]]; then
      local now=$(epoch)
      local sinceLast=$((${now} - ${LibBash__LastRebaseAt}))
      if [[ ${sinceLast} -gt ${LibBash__RebaseEvery} ]]; then
        export LibBash__LastRebaseAt=${now}
        printf "â‡¨ ${bldblu}lib-bash may be outdated, updating...${clr}\n" >&2
        git pull --rebase 2>/dev/null 1>/dev/null
        code=$?
        if [[ ${code} == 128 ]]; then
          printf "${bldylw}Warning: unable to do ${bldblu}git pull --rebase${bldylw} inside ../lib-bash${clr}\n"
          printf "Do you have local changes there? Please check ${bldylw}../lib-bash${clr} folder.\n"
          exit ${code}
        elif [[ ${code} != 0 ]]; then
          printf "${bldylw}Warning: unable to do ${bldblu}git pull --rebase${bldylw} inside ../lib-bash${clr}\n"
          printf "Exit code is ${code}\n"
          exit ${code}
        fi
      fi
    fi
  }

  cd ${__home} 1>/dev/null
  [[ -L "${LibBash__InstallationFolder}" ]] || ln -nfs ../${LibBash__GitDestinationFolder}/lib/ ${LibBash__InstallationFolder} 2>&1 | cat > /dev/null
}

lib::bash::gitignore() {
  [[ -s .gitignore ]] || return

  declare -a __installed=(${LibBash__InstallationFolder} bin/bootstrap)

  for ignored in ${__installed[@]}; do
    if [[ -z $(grep ${ignored} .gitignore) ]]; then
      echo ${ignored} >> .gitignore
    fi
  done
}

lib::bash::lib-install
lib::bash::gitignore
lib::bash::source ${LibBash__InstallationFolder}
