#!/usr/bin/env bash

set +e

export LibBash__Root=$(pwd)

export LibBash__LibFolder="lib-bash"
export LibBash__InstallationFolder="bin/lib-bash"
export LibBash__GitDestinationFolder="../lib-bash"
export LibBash__GitUrl="git@github.com:pioneerworks/lib-bash.git"
export LibBash__RebaseEvery=86400 # seconds
export LibBash__LastRebaseAt=1

export True=1
export False=0

debug_log() {
  [[ -n ${DEBUG} && ${USER} == "kig" ]] && printf "${txtylw} ✅  ${txtcya}$*${clr}\n"
}
error_log() {
  printf "${txtylw} « ERROR » ${bldred}$*${clr}\n"
}

quiet_cd() {
  dir=$1
  [[ -d ${dir} ]] && cd ${dir} >/dev/null
  [[ -d ${dir} ]] || {
    error_log "folder ${dir} does not exist."
    exit 1
  }
}

lib::bash::epoch() {
  date +%s
}

lib::bash::clone() {
  local dir="${LibBash__GitDestinationFolder}"
  if [[ ! -d "${dir}" ]]; then
    debug_log "cloning lib-bash repo to ${dir}..."
    git clone ${LibBash__GitUrl} ${dir} 2>&1
    [[ ! -d  "${dir}" ]] && {
      error_log "Unable to find lib-bash clone folder after checkout"; exit 1
    }
  else
    lib::bash::rebase-if-stale
  fi
}

lib::bash::update() {
  local dir="${LibBash__GitDestinationFolder}"
  local cwd=$(pwd)
  local now=$(lib::bash::epoch)

  if [[ -d "${dir}" ]]; then
    quiet_cd ${dir}

    [[ $(basename $(pwd)) == 'lib-bash' ]] || {
      error_log "expected to be in the ${LibBash__GitDestinationFolder} folder, but actually in $(pwd)"
      exit 5
    }

    git fetch >/dev/null

    local changes=$(git diff-index --name-only HEAD --)
    if [[ -n "${changes}" ]]; then
      error_log "It looks like you have some local changes in ${bldred}${dir}, aborting."
      exit 4
    fi


    git reset --hard origin/master > /dev/null
    echo ${now} > .last-rebase
    debug_log "recorded the last rebase at $(lib::bash::epoch)"
    quiet_cd ${cwd}
    return 0
  else
    error_log "directory ${dir} does not exist, aborting"
    return 1
  fi
}

lib::bash::last-rebase() {
  local dir="${LibBash__GitDestinationFolder}}"
  if [[ -s "${dir}/.last-rebase" ]]; then
    printf "%d" $(cat ${dir}/.last-rebase)
  else
    printf "%d" 1
  fi
}

lib::bash::rebase-if-stale() {
  local lastRebaseAt=$(lib::bash::last-rebase)
  [[ -z ${lastRebaseAt} ]] && lastRebaseAt=0

  local now=$(lib::bash::epoch)
  local secondsSinceLastRebase=$(( ${now} - ${lastRebaseAt} ))
  local houseSinceLastRebase=$(( ${secondsSinceLastRebase} / 3600 ))

  if [[ ${lastRebaseAt} -gt 0 && ${secondsSinceLastRebase} -gt ${LibBash__RebaseEvery} ]]; then
    debug_log "updating ${bldblu}lib-bash${txtgrn}, which is ${houseSinceLastRebase} hours old."
    lib::bash::update
  else
    debug_log "lib-bash is recent, its age is ${bldgrn}${houseSinceLastRebase}hrs..."
  fi
}

lib::bash::symlink() {
  cd ${LibBash__Root}
  if [[ ! -L "${LibBash__InstallationFolder}" ]]; then
    debug_log "symlink ${LibBash__InstallationFolder} is missing, creating ..."
    ln -nfs ../${LibBash__GitDestinationFolder}/lib/ ${LibBash__InstallationFolder} >/dev/null
  fi
}

lib::bash::gitignore() {
  cd ${LibBash__Root}
  [[ -s .gitignore ]] || return
  local ignored="bin/bootstrap"
  if [[ -z $(grep ${ignored} .gitignore 2>/dev/null) ]] ; then
    debug_log "adding ${ignored} to .gitignore..."
    echo bin/bootstrap >> .gitignore
  else
    debug_log "file .gitignore already has ${ignored}..."
  fi
}

lib::bash::bootstrap::main() {
  lib::bash::clone
  lib::bash::symlink
  lib::bash::gitignore
}
