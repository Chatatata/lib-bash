#!/usr/bin/env bash

export LibBash__LibFolder=${1:-"lib-bash"}
export LibBash__InstallationFolder="bin/${LibBash__LibFolder}"
export LibBash__GitDestinationFolder="../${LibBash__LibFolder}"
export LibBash__GitUrl="git@github.com:pioneerworks/lib-bash.git"
export LibBash__RebaseEvery=3600 # seconds
export LibBash__LastRebaseAt=${LibBash__LastRebaseAt:-1} # seconds

lib::bash::source() {
  local folder=${1}
  declare -a files=($(ls -1 ${folder}/*.sh))
  for bash_file in ${files[@]}; do source ${bash_file}; done
}

epoch() {
  date +%s
}

lib::bash::lib-install() {
  local __home=$(pwd)

  [[ -d "${LibBash__GitDestinationFolder}" ]] || \
    git clone ${LibBash__GitUrl} ${LibBash__GitDestinationFolder} 2>&1 | cat > /dev/null

  [[ -z ${CI} && -d "${LibBash__GitDestinationFolder}" ]] && {

    cd ${LibBash__GitDestinationFolder}
    [[ -s ".last-rebase" ]] && export LibBash__LastRebaseAt=(cat .last-rebase)
    if [[ ${LibBash__LastRebaseAt} -gt 0 ]]; then

      local now=$(epoch)
      local sinceLast=$((${now} - ${LibBash__LastRebaseAt}))

      if [[ ${sinceLast} -gt ${LibBash__RebaseEvery} ]]; then
        [[ -n $DEBUG ]] && printf "â‡¨ ${bldblu}lib-bash may be outdated, updating...${txtgrn}\n" >&2

        export LibBash__LastRebaseAt=${now}
        echo ${LibBash__LastRebaseAt} > ".last-rebase"

        git pull --rebase 2>/dev/null 1>/dev/null
        code=$?

        if [[ ${code} -ne 0 ]]; then
          printf "${bldylw}Warning: failed to ${bldgrn}git pull --rebase${bldylw} in ${bldred}${LibBash__GitDestinationFolder}${bldylw}...\n" >&2
          printf "${bldylw}Do you have local changes there?\nPlease check ${bldred}${LibBash__GitDestinationFolder}${bldylw} folder for details.\n" >&2
          printf "Exit code is ${bldred}${code}${clr}\n" >&2
          (( $_s_ )) && return ${code} || exit ${code}
        fi
      fi
    fi
  }

  cd ${__home} 1>/dev/null

  [[ -L "${LibBash__InstallationFolder}" ]] || \
     ln -nfs ../${LibBash__GitDestinationFolder}/lib/ ${LibBash__InstallationFolder} 2>&1 | cat > /dev/null

  return
}

lib::bash::gitignore() {
  [[ -s .gitignore ]] || return

  declare -a __installed=(${LibBash__InstallationFolder} bin/bootstrap)

  for ignored in ${__installed[@]}; do
    if [[ -z $(grep ${ignored} .gitignore) ]]; then
      echo ${ignored} >> .gitignore
    fi
  done
}

lib::bash::lib-install && \
  lib::bash::gitignore && \
  lib::bash::source ${LibBash__InstallationFolder}

