#!/usr/bin/env bash

set +e

export LibBash__LibFolder="lib-bash"
export LibBash__InstallationFolder="bin/lib-bash"
export LibBash__GitDestinationFolder="../lib-bash"
export LibBash__GitUrl="git@github.com:pioneerworks/lib-bash.git"
export LibBash__RebaseEvery=3600 # seconds
export LibBash__LastRebaseAt=${LibBash__LastRebaseAt:-1} # seconds

quiet_cd() {
  dir=$1
  [[ -d ${dir} ]] && cd ${dir} >/dev/null
  [[ -d ${dir} ]] || {
    error "folder ${dir} does not exist."
    exit 1
  } 
}

lib::bash::eval-remote-helpers() {
  # Load latest runner and output libs
  for file in time output run; do
    eval $(curl https://raw.githubusercontent.com/pioneerworks/lib-bash/master/lib/${file}.sh)
  done
}

export LibRun__AbortOnError__Default=${True}

lib::bash::source() {
  local folder=${1}
  declare -a files=($(ls -1 ${folder}/*.sh))
  for bash_file in ${files[@]}; do source ${bash_file}; done
}

lib::bash::epoch() {
  date +%s
}

lib::bash::clone() {
  local dir="${1:-${LibBash__GitDestinationFolder}}"
  if [[ ! -d "${dir}" ]]; then
    run "git clone ${LibBash__GitUrl} ${dir} 2>&1"
    [[ ! -d  "${dir}" ]] && {
      error "Unable to find lib-bash clone folder after checkout"; exit 1
    }
    return 0
  else
    return 1
  fi
}

lib::bash::update() {
  local dir="${1:-${LibBash__GitDestinationFolder}}"
  local cwd=$(pwd)
  local now=$(lib::bash::epoch)
  if [[ -d "${dir}" ]]; then
    info "updating ${bldblu}lib-bash${txtgrn} at ${bldylw}${now}."
    quiet_cd ${dir}
    run "git fetch"
    local changes=$(git diff-index --name-only HEAD --)
    if [[ -n "${changes}" ]]; then
      warning "It looks like you have some local changes in ${bldred}${dir}.." \
        "I can stash the changes for you to continue, or abort."
      lib::run::ask "Would you prefer for me to stash changes and continue?"
    fi

    run "git reset --hard origin/master"
    run "echo ${now} > .last-rebase"
    info "recorded the last rebase at $(lib::bash::epoch)"
    quiet_cd ${cwd}
    return 0
  else
    error "Directory ${dir} does not exist, aborting"
    return 1
  fi
}

lib::bash::last-rebase() {
  local dir="${1:-${LibBash__GitDestinationFolder}}"
  if [[ -s "${dir}/.last-rebase" ]]; then
    printf "%d" $(cat ${dir}/.last-rebase)
  else
    echo "%d" 1
  fi
}

lib::bash::rebase-if-stale() {
  local lastRebaseAt=$(lib::bash::last-rebase)
  local now=$(lib::bash::epoch)
  local secondsSinceLastRebase=$(( ${now} - ${LastRebaseAt} ))

  if [[ ${lastRebaseAt} -gt 0 && ${secondsSinceLastRebase} -gt ${LibBash__RebaseEvery} ]]; then
    lib::bash::update
  fi
}

lib::bash::install() {
  lib::bash::clone || lib::bash::rebase-if-stale
}
